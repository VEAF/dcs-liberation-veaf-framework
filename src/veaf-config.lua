-------------------------------------------------------------------------------------------------------------------------------------------------------------
-- Mission configuration file for the VEAF framework
-- see https://github.com/VEAF/VEAF-Mission-Creation-Tools
--
-- This configuration is tailored for a mission generated by DCS Liberation
-- see https://github.com/Khopa/dcs_liberation
-------------------------------------------------------------------------------------------------------------------------------------------------------------
veaf.config.MISSION_NAME = "Liberation"
veaf.config.MISSION_EXPORT_PATH = nil -- use default folder

-- VEAF Framework plugin - configuration
env.info("DCSLiberation|VEAF Framework plugin - configuration")

if dcsLiberation then

    -- specific options
    local allowSpawn = false
    local allowAssetRespawn = false
    local allowCTLD = false

    -- retrieve specific options values
    if dcsLiberation.plugins then
    
        if dcsLiberation.plugins.veaf then
    
            allowSpawn = dcsLiberation.plugins.veaf.allowSpawn
            allowAssetRespawn = dcsLiberation.plugins.veaf.allowAssetRespawn
            allowCTLD = dcsLiberation.plugins.veaf.allowCTLD
        end
    end
    
    veaf.logTrace(string.format("allowSpawn=%s",veaf.p(allowSpawn)))
    veaf.logTrace(string.format("allowAssetRespawn=%s",veaf.p(allowAssetRespawn)))
    veaf.logTrace(string.format("allowCTLD=%s",veaf.p(allowCTLD)))

    -- actual configuration code    

    -------------------------------------------------------------------------------------------------------------------------------------------------------------
    -- initialize all the scripts
    -------------------------------------------------------------------------------------------------------------------------------------------------------------
    if veafRadio then
        veaf.logInfo("init - veafRadio")
        veafRadio.initialize(true)
    end
    if veafSpawn and allowSpawn then
        veaf.logInfo("init - veafSpawn")
        veafSpawn.initialize()
    end
    if veafGrass then
        veaf.logInfo("init - veafGrass")
        veafGrass.initialize()
    end
    if veafCasMission and allowSpawn then
        veaf.logInfo("init - veafCasMission")
        veafCasMission.initialize()
    end
    if veafTransportMission and allowSpawn then
        veaf.logInfo("init - veafTransportMission")
        veafTransportMission.initialize()
    end

    -------------------------------------------------------------------------------------------------------------------------------------------------------------
    -- change some default parameters
    -------------------------------------------------------------------------------------------------------------------------------------------------------------
    veaf.DEFAULT_GROUND_SPEED_KPH = 25

    -------------------------------------------------------------------------------------------------------------------------------------------------------------
    -- initialize SHORTCUTS
    -------------------------------------------------------------------------------------------------------------------------------------------------------------
    if veafShortcuts and allowSpawn then
        veaf.logInfo("init - veafShortcuts")
        veafShortcuts.initialize()

        -- you can add all the shortcuts you want here. Shortcuts can be any VEAF command, as entered in a map marker.
        -- here are some examples :

        -- veafShortcuts.AddAlias(
        --     VeafAlias.new()
        --         :setName("-sa11")
        --         :setDescription("SA-11 Gadfly (9K37 Buk) battery")
        --         :setVeafCommand("_spawn group, name sa11")
        --         :setBypassSecurity(true)
        -- )

        -- veafShortcuts.AddAlias(
        --     VeafAlias.new()
        --         :setName("-login")
        --         :setDescription("Unlock the system")
        --         :setHidden(true)
        --         :setVeafCommand("_auth")
        --         :setBypassSecurity(true)
        -- )

        -- veafShortcuts.AddAlias(
        --     VeafAlias.new()
        --         :setName("-logout")
        --         :setDescription("Lock the system")
        --         :setHidden(true)
        --         :setVeafCommand("_auth logout")
        --         :setBypassSecurity(true)
        -- )

        -- veafShortcuts.AddAlias(
        --     VeafAlias.new()
        --         :setName("-mortar")
        --         :setDescription("Mortar team")
        --         :setVeafCommand("_spawn group, name mortar, country USA")
        --         :setBypassSecurity(true)
        -- )
    end
    -------------------------------------------------------------------------------------------------------------------------------------------------------------

    -------------------------------------------------------------------------------------------------------------------------------------------------------------
    -- configure ASSETS
    -------------------------------------------------------------------------------------------------------------------------------------------------------------

    if veafAssets then
        veafAssets.logInfo("Loading configuration")
        veafAssets.Assets = {
            -- no static assets here, in the future we may peek into the generated mission but not right now
            }
        if dcsLiberation.Tankers then
            for _, data in pairs(dcsLiberation.Tankers) do
                veafAssets.logDebug("adding asset "..data.callsign)
                local asset = { name=data.dcsGroupName, description=data.callsign.." ("..data.variant..")", information="Tacan:"..data.tacan.." Radio:"..data.radio }
                table.insert(veafAssets.Assets, asset)
                table.insert(veafMove.Tankers, data.dcsGroupName)
            end
        end
        if dcsLiberation.AWACs then
            for _, data in pairs(dcsLiberation.AWACs) do
                veafAssets.logDebug("adding asset "..data.callsign)
                local asset = { name=data.dcsGroupName, description=data.callsign.." (AWACS)", information="Radio:"..data.radio }
                table.insert(veafAssets.Assets, asset)
            end
        end
        if dcsLiberation.JTACs then
            for _, data in pairs(dcsLiberation.JTACs) do
                veafAssets.logDebug("adding asset "..data.callsign)
                local radio = veafSpawn.convertLaserToFreq(data.laserCode)
                local asset = { name=data.dcsGroupName, description=data.callsign.." (JTAC)", information="Laser: "..data.laserCode.." Radio:"..radio, jtac=data.laserCode, freq=radio, mod="am", callsign=data.callsign }
                table.insert(veafAssets.Assets, asset)
            end
        end
        veaf.logInfo("init - veafAssets")
        veafAssets.initialize(allowAssetRespawn)
    end

    -------------------------------------------------------------------------------------------------------------------------------------------------------------
    -- configure MOVE
    -------------------------------------------------------------------------------------------------------------------------------------------------------------
    if veafMove then
        veafMove.logInfo("Setting move tanker radio menus")
        -- keeping the veafMove.Tankers table empty will force veafMove.initialize() to browse the units, and find the tankers
        veaf.logInfo("init - veafMove")
        veafMove.initialize()
    end

    -------------------------------------------------------------------------------------------------------------------------------------------------------------
    -- configure WW2 settings based on loaded theatre
    -------------------------------------------------------------------------------------------------------------------------------------------------------------
    local theatre = string.lower(env.mission.theatre)
    veafNamedPoints.logInfo(string.format("theatre is %s", theatre))
    veaf.config.ww2 = false
    if theatre == "thechannel" then
        veaf.config.ww2 = true
    elseif theatre == "normandy" then
        veaf.config.ww2 = true
    end

    -------------------------------------------------------------------------------------------------------------------------------------------------------------
    -- configure NAMEDPOINTS
    -------------------------------------------------------------------------------------------------------------------------------------------------------------
    if veafNamedPoints then

        veafNamedPoints.Points = {
        }

        if dcsLiberation.TargetPoints then
            for _, data in pairs(dcsLiberation.TargetPoints) do
                veafNamedPoints.logDebug("adding named point "..data.name)           
                local point = { name=data.pointType.." "..data.name, point={x=data.positionX, z=data.positionY}}
                table.insert(veafNamedPoints.Points, point)
            end
        end

        veafNamedPoints.logInfo("Loading configuration")

        veafNamedPoints.logInfo("init - veafNamedPoints")
        veafNamedPoints.initialize()
        if theatre == "syria" then
            veafNamedPoints.addAllSyriaCities()
        elseif theatre == "caucasus" then
            veafNamedPoints.addAllCaucasusCities()
        elseif theatre == "persiangulf" then
            veafNamedPoints.addAllPersianGulfCities()
        elseif theatre == "thechannel" then
            veafNamedPoints.addAllTheChannelCities()
        else
            veafNamedPoints.logWarning(string.format("theatre %s is not yet supported by veafNamedPoints", theatre))
        end
    end

    -------------------------------------------------------------------------------------------------------------------------------------------------------------
    -- configure SECURITY
    -------------------------------------------------------------------------------------------------------------------------------------------------------------
    if veafSecurity then
        -- veafSecurity.password_L9["6ade6629f9219d87a011e7b8fbf8ef9584f2786d"] = true
        -- disable security
        veafSecurity.password_L0 = {}
        veafSecurity.password_L1 = {}
        veafSecurity.password_L9 = {}
        veafSecurity.authenticated = true
        veafSecurity.logInfo("Loading configuration")
        veaf.logInfo("init - veafSecurity")
        veafSecurity.initialize()
    end

    -- force security in order to test it when dynamic loading is in place
    --veaf.SecurityDisabled = false
    --veafSecurity.authenticated = false

    -------------------------------------------------------------------------------------------------------------------------------------------------------------
    -- configure CARRIER OPERATIONS 
    -------------------------------------------------------------------------------------------------------------------------------------------------------------
    if veafCarrierOperations then
        veaf.logInfo("init - veafCarrierOperations")
        -- the carriers will be automatically found
        veafCarrierOperations.initialize(true)
    end

    -------------------------------------------------------------------------------------------------------------------------------------------------------------
    -- configure CTLD 
    -------------------------------------------------------------------------------------------------------------------------------------------------------------
    if ctld and allowCTLD then
        ctld.pickupZones = {
            { "pickzone1", "none", -1, "yes", 0 },
            { "pickzone2", "none", -1, "yes", 0 },
            { "pickzone3", "none", -1, "yes", 0 },
            { "pickzone4", "none", -1, "yes", 0 },
            { "pickzone5", "none", -1, "yes", 0 },
            { "pickzone6", "none", -1, "yes", 0 },
            { "pickzone7", "none", -1, "yes", 0 },
            { "pickzone8", "none", -1, "yes", 0 },
            { "pickzone9", "none", -1, "yes", 0 }, 
            { "pickzone10", "none", -1, "yes", 0 },
            { "pickzone11", "none", -1, "yes", 0 }, 
            { "pickzone12", "none", -1, "yes", 0 }, 
            { "pickzone13", "none", -1, "yes", 0 }, 
            { "pickzone14", "none", -1, "yes", 0 },
            { "pickzone15", "none", -1, "yes", 0 },
            { "pickzone16", "none", -1, "yes", 0 },
            { "pickzone17", "none", -1, "yes", 0 },
            { "pickzone18", "none", -1, "yes", 0 },
            { "pickzone19", "none", 5, "yes", 0 },
            { "pickzone20", "none", 10, "yes", 0, 1000 }, -- optional extra flag number to store the current number of groups available in

            { "CVN-74 Stennis", "none", 10, "yes", 0, 1001 }, -- instead of a Zone Name you can also use the UNIT NAME of a ship
            { "LHA-1 Tarawa", "none", 10, "yes", 0, 1002 }, -- instead of a Zone Name you can also use the UNIT NAME of a ship
        }

        -- ******************** Transports names **********************

        -- Use any of the predefined names or set your own ones
        ctld.transportPilotNames = {}

        for i = 1, 25 do
            table.insert(ctld.transportPilotNames, string.format("yak #%03d",i))
        end
    
        for i = 1, 10 do
            table.insert(ctld.transportPilotNames, string.format("transport #%03d",i))
        end
    
        for i = 1, 79 do
            table.insert(ctld.transportPilotNames, string.format("helicargo #%03d",i))
        end

        -- ************** Logistics UNITS FOR CRATE SPAWNING ******************

        -- Use any of the predefined names or set your own ones
        -- When a logistic unit is destroyed, you will no longer be able to spawn crates

        ctld.logisticUnits = {
            "logistic #001",
            "logistic #002",
            "logistic #003",
            "logistic #004",
            "logistic #005",
            "logistic #006",
            "logistic #007",
            "logistic #008",
            "logistic #009",
            "logistic #010",
            "logistic #011",
            "logistic #012",
            "logistic #013",
            "logistic #014",
            "logistic #015",
            "logistic #016",
            "logistic #017",
            "logistic #018",
            "logistic #019",
            "logistic #020",
        }

        if veafTransportMission then
            -- automatically add all the human-manned transport helicopters to ctld.transportPilotNames
            veafTransportMission.initializeAllHelosInCTLD()

            -- automatically add all the carriers and FARPs to ctld.logisticUnits
            veafTransportMission.initializeAllLogisticInCTLD()
        end

        veaf.logInfo("init - ctld")
        ctld.initialize()
    end

    -------------------------------------------------------------------------------------------------------------------------------------------------------------
    -- initialize the remote interface
    -------------------------------------------------------------------------------------------------------------------------------------------------------------
    if veafRemote then
        veaf.logInfo("init - veafRemote")
        veafRemote.initialize()
    end

    -------------------------------------------------------------------------------------------------------------------------------------------------------------
    -- initialize Hound Elint
    -------------------------------------------------------------------------------------------------------------------------------------------------------------
    if veafHoundElint then
        veaf.logInfo("init - veafHoundElint")
        veafHoundElint.initialize(
            "ELINT", -- prefix
            { -- red
                admin = false,
                markers = true,
                atis = false,
                controller = false
            },
            { -- blue
                admin = false,
                markers = true,
                atis = {
                    freq = 282.125,
                    interval = 15,
                    speed = 1,
                    reportEWR = false
                },
                controller = {
                    freq = 282.225,
                    voiceEnabled = true
                }
            }
        )
    end
end